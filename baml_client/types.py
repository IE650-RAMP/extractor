###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AssessmentForm(str, Enum):
    
    WRITTEN = "WRITTEN"
    ORAL = "ORAL"
    ASSIGNEMNT = "ASSIGNEMNT"
    REPORT = "REPORT"
    PRESENTATION = "PRESENTATION"
    PRACTICAL = "PRACTICAL"

class Degree(str, Enum):
    
    BACHELOR_OF_ARTS = "BACHELOR_OF_ARTS"
    BACHELOR_OF_SCIENCE = "BACHELOR_OF_SCIENCE"
    BACHELOR_OF_EDUCATION = "BACHELOR_OF_EDUCATION"
    BACHELOR_OF_LAWS = "BACHELOR_OF_LAWS"
    MASTER_OF_SCIENCE = "MASTER_OF_SCIENCE"
    MASTER_OF_ARTS = "MASTER_OF_ARTS"
    MASTER_OF_COMPARATIVE_BUSINESS_LAW = "MASTER_OF_COMPARATIVE_BUSINESS_LAW"
    MASTER_OF_LAWS = "MASTER_OF_LAWS"
    MASTER_OF_EDUCATION = "MASTER_OF_EDUCATION"

class Semester(str, Enum):
    
    FFS = "FFS"
    HWS = "HWS"

class Module(BaseModel):
    
    
    name: str
    id: str
    ects: int
    workloadInPerson: int
    workloadSelfStudy: int
    offeredIn: List["Semester"]
    recommendedSemester: List[int]
    recommendedLiterature: List[str]
    hasLecturer: List["Person"]
    hasPersonInCharge: List["Person"]
    assessmentForms: List["AssessmentForm"]
    examinationDistribution: Optional[str] = None
    examinationDuration: Optional[int] = None
    requiredPrerequisiteModules: List[str]
    optionalPrerequisiteModules: List[str]
    additionalPrerequisite: Optional[str] = None
    furtherModules: List[str]

class ModuleCatalog(BaseModel):
    
    
    studyProgram: "StudyProgram"
    studyAreas: List["StudyArea"]

class ModuleList(BaseModel):
    
    
    modules: List["Module"]

class ModuleOverview(BaseModel):
    
    
    name: str
    id: str

class Person(BaseModel):
    
    
    name: str
    title: Optional[str] = None
    hasName: bool

class StudyArea(BaseModel):
    
    
    name: str
    requiredEcts: List[int]
    modules: List["Module"]

class StudyAreaOverview(BaseModel):
    
    
    name: str
    requiredEcts: List[int]
    modules: List["ModuleOverview"]

class StudyProgram(BaseModel):
    
    
    name: str
    hasDegree: List["Degree"]

class StudyProgrammOverview(BaseModel):
    
    
    name: str
    hasDegree: List["Degree"]
    studyArea: List["StudyAreaOverview"]
